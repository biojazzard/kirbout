// Generated by CoffeeScript 1.4.0

/*
 * Description or Responsability
 *
 * @namespace KINOUT
 * @class View
 *
 * @author Javier Jimenez Villar <javi@tapquo.com> || @soyjavi
*/


(function() {

  KINOUT.View = (function(knt, $$, undefined_) {
    var SELECTOR, STYLE, index, render, slide, _index, _renderKeyboard, _saveNewIndexes, _steps, _updateProgress, _updateSlideIndexes, _updateSlides;
    SELECTOR = knt.Constants.SELECTOR;
    STYLE = knt.Constants.STYLE;
    _index = knt.index;
    _steps = [];
    slide = function(horizontal, vertical, next_step) {
      if (next_step == null) {
        next_step = true;
      }
      if (!knt.Element.steps(next_step)) {
        _saveNewIndexes(horizontal, vertical);
        _updateSlideIndexes();
        _renderKeyboard(horizontal, vertical);
        knt.Url.write(_index.horizontal, _index.vertical);
      }
    };
    _renderKeyboard = function(horizontal, vertical) {
      var nSlides, nSubSlides;
      nSlides = knt.Element.slides().length;
      nSubSlides = knt.Element.subslides(horizontal).length;
      if (horizontal > 0 && horizontal < (nSlides - 1)) {
        $$(SELECTOR.KEYBOARD.left).removeClass('enabled').addClass('enabled');
        $$(SELECTOR.KEYBOARD.right).removeClass('enabled').addClass('enabled');
      } else if (horizontal <= 0) {
        $$(SELECTOR.KEYBOARD.left).removeClass('enabled');
        $$(SELECTOR.KEYBOARD.right).removeClass('enabled').addClass('enabled');
      } else if (horizontal >= (nSlides - 1)) {
        $$(SELECTOR.KEYBOARD.left).removeClass('enabled').addClass('enabled');
        $$(SELECTOR.KEYBOARD.right).removeClass('enabled');
      }
      if (!isNaN(nSubSlides) && nSubSlides > 1) {
        if (vertical > 0 && vertical < (nSubSlides - 1)) {
          $$(SELECTOR.KEYBOARD.up).removeClass('enabled').addClass('enabled');
          $$(SELECTOR.KEYBOARD.down).removeClass('enabled').addClass('enabled');
        } else if (vertical <= 0) {
          $$(SELECTOR.KEYBOARD.up).removeClass('enabled');
          $$(SELECTOR.KEYBOARD.down).removeClass('enabled').addClass('enabled');
        } else if (vertical >= (nSubSlides - 1)) {
          $$(SELECTOR.KEYBOARD.up).removeClass('enabled').addClass('enabled');
          $$(SELECTOR.KEYBOARD.down).removeClass('enabled');
        }
      } else {
        $$(SELECTOR.KEYBOARD.up).removeClass('enabled');
        $$(SELECTOR.KEYBOARD.down).removeClass('enabled');
      }
      console.log('horizontal:' + horizontal + '|' + (nSlides - 1) + ' || vertical:' + vertical + '|' + (nSubSlides - 1));
    };
    index = function() {
      return {
        'horizontal': _index.horizontal,
        'vertical': _index.vertical
      };
    };
    _saveNewIndexes = function(horizontal, vertical) {
      _index.horizontal = (horizontal === undefined ? _index.horizontal : horizontal);
      _index.vertical = (vertical === undefined ? _index.vertical : vertical);
    };
    _updateSlideIndexes = function() {
      _index.horizontal = _updateSlides(SELECTOR.SLIDE, _index.horizontal);
      _index.vertical = _updateSlides(SELECTOR.SUBSLIDE, _index.vertical);
      _updateProgress();
    };
    _updateProgress = function() {
      var horizontal, slides, subslides, vertical;
      slides = knt.Element.slides();
      horizontal = parseInt((_index.horizontal * 100) / (slides.length - 1));
      window.requestAnimationFrame(function() {
        return knt.Element.progress("horizontal", horizontal);
      });
      vertical = 0;
      subslides = knt.Element.subslides(_index.horizontal);
      if (subslides.length > 1) {
        vertical = parseInt(((_index.vertical + 1) * 100) / subslides.length);
      }
      return window.requestAnimationFrame(function() {
        return knt.Element.progress("vertical", vertical);
      });
    };
    _updateSlides = function(selector, index) {
      var slides;
      slides = Array.prototype.slice.call(document.querySelectorAll(selector));
      if (slides.length) {
        index = Math.max(Math.min(index, slides.length - 1), 0);
        render(slides, index);
      } else {
        index = 0;
      }
      return index;
    };
    render = function(slides, index) {
      slides[index].setAttribute("class", STYLE.PRESENT);
      slides.slice(0, index).map(function(element) {
        return element.setAttribute("class", STYLE.PAST);
      });
      return slides.slice(index + 1).map(function(element) {
        return element.setAttribute("class", STYLE.FUTURE);
      });
    };
    return {
      slide: slide,
      index: index,
      render: render
    };
  })(KINOUT, Quo);

}).call(this);
